"""The module includes functionality for getting currently observed weather."""

from datetime import datetime as dt
import pytz
from pyowm.owm import OWM
from config import APIKEY, INCH_TO_MM_CONSTANT

USER_TIMEZONE = pytz.timezone("Europe/Kiev")


def get_weather(city: str, open_weather_token: str) -> dict:
    """The function shows currently observed weather.

    :param city: the city name with country abbreviate, for example "Kharkiv,UA"
    :param open_weather_token: the API key is generated by
        https://home.openweathermap.org/api_keys service
    :returns: dictionary with observed weather items
    """
    observed_weather = {}
    owm = OWM(open_weather_token)
    weather_mng = owm.weather_manager()
    weather = weather_mng.weather_at_place(city).weather
    sunrise = weather.sunrise_time("date")
    sunset = weather.sunset_time("date")

    observed_weather['status'] = weather.status
    observed_weather['temperature'] = weather.temperature("celsius")['temp']
    observed_weather['humidity'] = weather.humidity
    observed_weather['pressure'] = round(weather.barometric_pressure("inHg")['press'] * INCH_TO_MM_CONSTANT, 1)
    observed_weather['wind_speed'] = weather.wind()["speed"]
    observed_weather['clouds'] = weather.clouds
    observed_weather['rain'] = weather.rain.get("1h", "No data")
    observed_weather['sunrise'] = str(dt.time(sunrise.astimezone(USER_TIMEZONE)))
    observed_weather['sunset'] = str(dt.time(sunset.astimezone(USER_TIMEZONE)))
    return observed_weather


def main():
    """The "main" function provides common functionality implementation."""
    print(get_weather('Kharkiv, UA', APIKEY))


if __name__ == '__main__':
    main()
